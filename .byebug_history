c
self
c
params[:user]
params(:user)
c
@user.errors
n
c
@user.errors
n
c
params
@user.errors
n
c
@user.errors
c
@user.errors
n
yen
params[:user]
params[:users]
c
params
c
params
c
params[:email]
@user
c
params
c
change_password
password_change
params
c
params
c
params
@pass
c
@pass
c
@pass
c
@pass
c
params["change_password"]
params["change_password"].to_bool
params["change_password"].to_boolean
params["change_password"].to_bool
params["change_password"]
params["change_password"].to_boolean
params
c
pass
@pass
c
@pass
c
params
c
@user
@user.update_attributes(params.require(:user).permit(:password,:password_confirmation))
@user
@user=User.find(params[:user_id])
@user.update_attributes(params.require(:user).permit(:password,:password_confirmation))
User.find(params[:user_id])
c
User.find(params[:user_id])
User.find(user_id)
params
c
render @users
c
@users
c
User.find_by(email: params[:user][:email].downcase)
params[:user][:email].downcase
params[:user][:email]
[:user][:email]
params
c
params
c
current_user.relationships.find_by(followed_id: @user.id)
c
current_user.following?(@user)
c
 c
c
cc
c
current_user
c
continue
CCCC
C
c
@feed_items.count
@feed_items
@feed_items.any?
shared/feed
c
@micropost
c
@micropost
@microposts
c
params
c
Micropost.all
User.Micropost.all
User.Microposts.all
params
c
params
c
params
c
c\
params
c
@users.count
User.paginate(page: params[:page])
params
c
@user.errors
c
C
c
@user.errors.count
@user.errors.first
@user.errors
@user.error
c
@user.errors.first
params
@user.errors
c
@user.save
c
@user.name
user.name
c
params
c
@current_user
current_user
c
params
c
"https://secure.gravtar.com/avatar/#{gravatar_id}"
gravatar_id
n
user.email.downcase
ghxffffffffffffffffffffh
c
 c
c
params
A
SA
AS
SA
SASA
@USER
